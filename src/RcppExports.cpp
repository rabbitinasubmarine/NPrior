// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Neuro_Linear
Rcpp::List Neuro_Linear(const arma::vec& y, const arma::mat& X, int N, int BURN, arma::colvec alpha, arma::colvec w, arma::colvec sig, double n1, double p1, double eta, double alpha0, double size_a, const int& type, const int& eta_update, const int& alpha0_update, const int& sig_update, const int& K, const int& B_size, const double& a0, const double& b0, const int& prior_sig_type, const int& verbose);
RcppExport SEXP _NPrior_Neuro_Linear(SEXP ySEXP, SEXP XSEXP, SEXP NSEXP, SEXP BURNSEXP, SEXP alphaSEXP, SEXP wSEXP, SEXP sigSEXP, SEXP n1SEXP, SEXP p1SEXP, SEXP etaSEXP, SEXP alpha0SEXP, SEXP size_aSEXP, SEXP typeSEXP, SEXP eta_updateSEXP, SEXP alpha0_updateSEXP, SEXP sig_updateSEXP, SEXP KSEXP, SEXP B_sizeSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP prior_sig_typeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type BURN(BURNSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< double >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double >::type size_a(size_aSEXP);
    Rcpp::traits::input_parameter< const int& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const int& >::type eta_update(eta_updateSEXP);
    Rcpp::traits::input_parameter< const int& >::type alpha0_update(alpha0_updateSEXP);
    Rcpp::traits::input_parameter< const int& >::type sig_update(sig_updateSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type B_size(B_sizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const int& >::type prior_sig_type(prior_sig_typeSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(Neuro_Linear(y, X, N, BURN, alpha, w, sig, n1, p1, eta, alpha0, size_a, type, eta_update, alpha0_update, sig_update, K, B_size, a0, b0, prior_sig_type, verbose));
    return rcpp_result_gen;
END_RCPP
}
// Neuro_ReLU_Linear
Rcpp::List Neuro_ReLU_Linear(const arma::vec& y, const arma::mat& X, int N, int BURN, arma::colvec alpha, arma::colvec w, arma::colvec sig, double n1, double p1, double eta, double alpha0, double a0, double b0, int alpha0_update, const int& eta_update, const int& sig_update, const int& B_size, const int& prior_sig_type, const int& verbose);
RcppExport SEXP _NPrior_Neuro_ReLU_Linear(SEXP ySEXP, SEXP XSEXP, SEXP NSEXP, SEXP BURNSEXP, SEXP alphaSEXP, SEXP wSEXP, SEXP sigSEXP, SEXP n1SEXP, SEXP p1SEXP, SEXP etaSEXP, SEXP alpha0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP alpha0_updateSEXP, SEXP eta_updateSEXP, SEXP sig_updateSEXP, SEXP B_sizeSEXP, SEXP prior_sig_typeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type BURN(BURNSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< double >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< int >::type alpha0_update(alpha0_updateSEXP);
    Rcpp::traits::input_parameter< const int& >::type eta_update(eta_updateSEXP);
    Rcpp::traits::input_parameter< const int& >::type sig_update(sig_updateSEXP);
    Rcpp::traits::input_parameter< const int& >::type B_size(B_sizeSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior_sig_type(prior_sig_typeSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(Neuro_ReLU_Linear(y, X, N, BURN, alpha, w, sig, n1, p1, eta, alpha0, a0, b0, alpha0_update, eta_update, sig_update, B_size, prior_sig_type, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NPrior_Neuro_Linear", (DL_FUNC) &_NPrior_Neuro_Linear, 22},
    {"_NPrior_Neuro_ReLU_Linear", (DL_FUNC) &_NPrior_Neuro_ReLU_Linear, 19},
    {NULL, NULL, 0}
};

RcppExport void R_init_NPrior(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
